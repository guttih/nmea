//Listener - from LIB
#include <mcp_can.h>
#include <SPI.h>

long unsigned int rxId;
unsigned char len = 0;
unsigned char rxBuf[8];
char msgString[128];  // Array to store serial output

// Adjusted SPI/CAN Pins
#define CAN_INT    4   // INT pin
#define CAN_CS    10   // CS pin
#define SPI_MOSI  11
#define SPI_MISO  13
#define SPI_SCK   12

MCP_CAN CAN0(CAN_CS);  // Initialize MCP with CS pin

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("CAN Listener starting...");

  pinMode(CAN_INT, INPUT);
  SPI.begin(SPI_SCK, SPI_MISO, SPI_MOSI, CAN_CS);

  // Initialize MCP2515 at 500kbps with 8MHz crystal
  if (CAN0.begin(MCP_ANY, CAN_500KBPS, MCP_8MHZ) == CAN_OK) {
    Serial.println("MCP2515 Initialized Successfully!");
  } else {
    Serial.println("Error Initializing MCP2515...");
    while (1);
  }

  CAN0.setMode(MCP_NORMAL);  // Enter normal mode (required to ACK messages)

  Serial.println("MCP2515 Receiver Ready...");
}

void loop() {
  if (!digitalRead(CAN_INT)) {
    CAN0.readMsgBuf(&rxId, &len, rxBuf);

    if ((rxId & 0x80000000) == 0x80000000)
      sprintf(msgString, "Extended ID: 0x%.8lX  DLC: %1d  Data:", (rxId & 0x1FFFFFFF), len);
    else
      sprintf(msgString, "Standard ID: 0x%.3lX       DLC: %1d  Data:", rxId, len);

    Serial.print(msgString);

    if ((rxId & 0x40000000) == 0x40000000) {
      Serial.print(" REMOTE REQUEST FRAME");
    } else {
      for (byte i = 0; i < len; i++) {
        sprintf(msgString, " 0x%.2X", rxBuf[i]);
        Serial.print(msgString);
      }
    }

    Serial.println();
  }
}
