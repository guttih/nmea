//loopback
#include <mcp_can.h>
#include <SPI.h>

// CAN TX Variables
unsigned long prevTX = 0;
const unsigned int invlTX = 1000;
byte data[] = {0xAA, 0x55, 0x01, 0x10, 0xFF, 0x12, 0x34, 0x56};

// CAN RX Variables
long unsigned int rxId;
unsigned char len;
unsigned char rxBuf[8];

// Serial Output String Buffer
char msgString[128];

// === Your wiring ===
#define CAN_INT 4    // INT pin connected to GPIO4 (B4/A4)
#define CAN_CS 10    // CS pin connected to GPIO10 (B8/A8)

#define SPI_MOSI 11   // MCP2515 SI  (GPIO11, B6)
#define SPI_MISO 13   // MCP2515 SO  (GPIO13, B7)
#define SPI_SCK  12   // MCP2515 SCK (GPIO12, B5)

MCP_CAN CAN0(CAN_CS);  // Create CAN controller object

void setup()
{
  Serial.begin(115200);
  delay(1000);

  Serial.println("Starting CAN loopback test...");

  pinMode(CAN_INT, INPUT);
  SPI.begin(SPI_SCK, SPI_MISO, SPI_MOSI, CAN_CS);

  // Init MCP2515 at 500 kbps, oscillator = 8 MHz
  if (CAN0.begin(MCP_ANY, CAN_500KBPS, MCP_8MHZ) == CAN_OK)
    Serial.println("MCP2515 Initialized Successfully!");
  else {
    Serial.println("Error Initializing MCP2515...");
    while (1);
  }

  // Leave in loopback mode (default after init with MCP_ANY)
  Serial.println("MCP2515 Library Loopback Example Ready...");
}

void loop()
{
  if (!digitalRead(CAN_INT)) {
    CAN0.readMsgBuf(&rxId, &len, rxBuf);

    if ((rxId & 0x80000000) == 0x80000000)
      sprintf(msgString, "Extended ID: 0x%.8lX  DLC: %1d  Data:", (rxId & 0x1FFFFFFF), len);
    else
      sprintf(msgString, "Standard ID: 0x%.3lX       DLC: %1d  Data:", rxId, len);

    Serial.print(msgString);

    if ((rxId & 0x40000000) == 0x40000000) {
      Serial.print(" REMOTE REQUEST FRAME");
    } else {
      for (byte i = 0; i < len; i++) {
        sprintf(msgString, " 0x%.2X", rxBuf[i]);
        Serial.print(msgString);
      }
    }

    Serial.println();
  }

  if (millis() - prevTX >= invlTX) {
    prevTX = millis();
    byte sndStat = CAN0.sendMsgBuf(0x100, 8, data);
    if (sndStat == CAN_OK)
      Serial.println("Message Sent Successfully!");
    else
      Serial.println("Error Sending Message...");
  }
}
