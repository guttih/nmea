// sender
#include <OneWire.h>
#include <DallasTemperature.h>
#include <SPI.h>
#include "mcp_can.h"

// Pin definitions for SPI and sensor
#define CAN_INT 4       // MCP2515 INT (B4 ←→ A4 ←→ GPIO4)
#define CAN_CS 10       // MCP2515 CS (B8 ←→ A8 ←→ GPIO10)
#define SPI_MOSI 11     // MCP2515 SI  (B6 ←→ A6 ←→ GPIO11)
#define SPI_MISO 13     // MCP2515 SO  (B7 ←→ A7 ←→ GPIO13)
#define SPI_SCK 12      // MCP2515 SCK (B5 ←→ A5 ←→ GPIO12)
#define ONE_WIRE_BUS 21 // DS18B20 data pin (GPIO21, can be any suitable GPIO)

OneWire oneWire(ONE_WIRE_BUS);
DallasTemperature sensors(&oneWire);
MCP_CAN CAN0(CAN_CS); // Create CAN controller instance on CS pin

void setup()
{
    Serial.begin(115200);
    delay(1000);
    Serial.println("CAN Sender initializing...");

    // Start up the DS18B20 sensor
    sensors.begin();
    pinMode(CAN_INT, INPUT);
    SPI.begin(SPI_SCK, SPI_MISO, SPI_MOSI, CAN_CS);
    // Initialize MCP2515 CAN controller at 500 kbps, normal mode, 8 MHz oscillator
    byte initStatus = CAN0.begin(MCP_NORMAL, CAN_500KBPS, MCP_8MHZ);
    if (initStatus == CAN_OK)
    {
        Serial.println("CAN Bus initialized at 500 kbps");
    }
    else
    {
        Serial.print("CAN Bus init failed with status: ");
        Serial.println(initStatus);
        while (1)
            ;
    }
}

void loop()
{
    // Read temperature from the DS18B20 sensor
    sensors.requestTemperatures();            // Send command to get temperatures
    float tempC = sensors.getTempCByIndex(0); // Read first sensor (index 0)

    // Convert float temperature to integer (hundredths of a degree)
    int16_t tempInt = (int16_t)(tempC * 100); // e.g., 25.34 °C -> 2534

    // Prepare CAN message data bytes from tempInt
    byte data[2];
    data[0] = lowByte(tempInt);
    data[1] = highByte(tempInt);

    // Send CAN message with standard 11-bit ID (ext flag = 0):contentReference[oaicite:9]{index=9}
    unsigned long id = 0x100; // standard CAN ID (0x100 is arbitrary example)
    byte len = 2;             // 2 data bytes
    byte sendStatus = CAN0.sendMsgBuf(id, 0, len, data);

    if (sendStatus == CAN_OK)
    {
        Serial.print("Sent CAN message: ID=0x");
        Serial.print(id, HEX);
        Serial.print(" Data=[");
        Serial.print(data[0]);
        Serial.print(", ");
        Serial.print(data[1]);
        Serial.println("] (temp = " + String(tempC) + " °C)");
    }
    else
    {
        Serial.print("Send failed: ");
        Serial.println(sendStatus); // Will show 1 or 2
    }

    delay(1000); // wait 1 second before sending next reading
}
